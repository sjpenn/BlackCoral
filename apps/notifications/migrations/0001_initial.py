# Generated by Django 5.2.5 on 2025-08-14 00:57

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="NotificationTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("opportunity_new", "New Opportunity Available"),
                            (
                                "opportunity_deadline",
                                "Opportunity Deadline Approaching",
                            ),
                            ("decision_made", "Bid Decision Made"),
                            ("team_assignment", "Team Assignment"),
                            ("task_assigned", "Task Assigned"),
                            ("task_due", "Task Due Soon"),
                            ("task_overdue", "Task Overdue"),
                            ("milestone_approaching", "Milestone Approaching"),
                            ("milestone_overdue", "Milestone Overdue"),
                            ("comment_mention", "Mentioned in Comment"),
                            ("comment_reply", "Comment Reply"),
                            ("review_request", "Review Request"),
                            ("proposal_submitted", "Proposal Submitted"),
                            ("award_notification", "Award Notification"),
                            ("system_update", "System Update"),
                        ],
                        max_length=30,
                        unique=True,
                    ),
                ),
                (
                    "title_template",
                    models.CharField(
                        help_text="Title template with variables like {user_name}",
                        max_length=200,
                    ),
                ),
                (
                    "message_template",
                    models.TextField(help_text="Message template with variables"),
                ),
                (
                    "email_subject_template",
                    models.CharField(blank=True, max_length=200),
                ),
                ("email_body_template", models.TextField(blank=True)),
                (
                    "default_priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "default_delivery_methods",
                    models.JSONField(
                        default=list, help_text="List of default delivery methods"
                    ),
                ),
                (
                    "available_variables",
                    models.JSONField(
                        default=list, help_text="List of available template variables"
                    ),
                ),
                ("send_immediately", models.BooleanField(default=True)),
                (
                    "delay_minutes",
                    models.IntegerField(
                        default=0, help_text="Minutes to delay before sending"
                    ),
                ),
                (
                    "expires_after_hours",
                    models.IntegerField(
                        blank=True,
                        help_text="Hours after which notification expires",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["notification_type"],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("opportunity_new", "New Opportunity Available"),
                            (
                                "opportunity_deadline",
                                "Opportunity Deadline Approaching",
                            ),
                            ("decision_made", "Bid Decision Made"),
                            ("team_assignment", "Team Assignment"),
                            ("task_assigned", "Task Assigned"),
                            ("task_due", "Task Due Soon"),
                            ("task_overdue", "Task Overdue"),
                            ("milestone_approaching", "Milestone Approaching"),
                            ("milestone_overdue", "Milestone Overdue"),
                            ("comment_mention", "Mentioned in Comment"),
                            ("comment_reply", "Comment Reply"),
                            ("review_request", "Review Request"),
                            ("proposal_submitted", "Proposal Submitted"),
                            ("award_notification", "Award Notification"),
                            ("system_update", "System Update"),
                        ],
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("in_app", "In-App Notification"),
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("slack", "Slack"),
                            ("teams", "Microsoft Teams"),
                        ],
                        default="in_app",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("delivered", "Delivered"),
                            ("read", "Read"),
                            ("failed", "Failed"),
                            ("dismissed", "Dismissed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "action_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to navigate to when notification is clicked",
                    ),
                ),
                (
                    "action_label",
                    models.CharField(
                        blank=True,
                        help_text="Label for the action button",
                        max_length=50,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional notification data",
                    ),
                ),
                (
                    "scheduled_for",
                    models.DateTimeField(
                        blank=True, help_text="When to send the notification", null=True
                    ),
                ),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When notification expires", null=True
                    ),
                ),
                (
                    "group_key",
                    models.CharField(
                        blank=True,
                        help_text="Key for grouping related notifications",
                        max_length=100,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="NotificationDigest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "digest_type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily Digest"),
                            ("weekly", "Weekly Digest"),
                            ("custom", "Custom Digest"),
                        ],
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("summary", models.TextField()),
                ("notification_count", models.IntegerField(default=0)),
                ("period_start", models.DateTimeField()),
                ("period_end", models.DateTimeField()),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                (
                    "delivery_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("delivered", "Delivered"),
                            ("read", "Read"),
                            ("failed", "Failed"),
                            ("dismissed", "Dismissed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "notifications",
                    models.ManyToManyField(
                        related_name="digests", to="notifications.notification"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_digests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="NotificationPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("opportunity_new", "New Opportunity Available"),
                            (
                                "opportunity_deadline",
                                "Opportunity Deadline Approaching",
                            ),
                            ("decision_made", "Bid Decision Made"),
                            ("team_assignment", "Team Assignment"),
                            ("task_assigned", "Task Assigned"),
                            ("task_due", "Task Due Soon"),
                            ("task_overdue", "Task Overdue"),
                            ("milestone_approaching", "Milestone Approaching"),
                            ("milestone_overdue", "Milestone Overdue"),
                            ("comment_mention", "Mentioned in Comment"),
                            ("comment_reply", "Comment Reply"),
                            ("review_request", "Review Request"),
                            ("proposal_submitted", "Proposal Submitted"),
                            ("award_notification", "Award Notification"),
                            ("system_update", "System Update"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("in_app", "In-App Notification"),
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("slack", "Slack"),
                            ("teams", "Microsoft Teams"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_enabled", models.BooleanField(default=True)),
                ("immediate", models.BooleanField(default=True)),
                ("daily_digest", models.BooleanField(default=False)),
                ("weekly_digest", models.BooleanField(default=False)),
                (
                    "quiet_hours_start",
                    models.TimeField(
                        blank=True,
                        help_text="Start of quiet hours (no notifications)",
                        null=True,
                    ),
                ),
                (
                    "quiet_hours_end",
                    models.TimeField(
                        blank=True, help_text="End of quiet hours", null=True
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WebhookEndpoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("slack", "Slack"),
                            ("teams", "Microsoft Teams"),
                            ("discord", "Discord"),
                            ("webhook", "Generic Webhook"),
                            ("zapier", "Zapier"),
                            ("ifttt", "IFTTT"),
                        ],
                        max_length=20,
                    ),
                ),
                ("webhook_url", models.URLField()),
                ("is_active", models.BooleanField(default=True)),
                (
                    "headers",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Custom headers for webhook requests",
                    ),
                ),
                (
                    "payload_template",
                    models.TextField(blank=True, help_text="JSON payload template"),
                ),
                (
                    "notification_types",
                    models.JSONField(
                        default=list, help_text="List of notification types to send"
                    ),
                ),
                (
                    "priority_filter",
                    models.JSONField(
                        default=list, help_text="List of priorities to send"
                    ),
                ),
                (
                    "secret_token",
                    models.CharField(
                        blank=True,
                        help_text="Secret token for webhook verification",
                        max_length=200,
                    ),
                ),
                ("last_sent", models.DateTimeField(blank=True, null=True)),
                ("success_count", models.IntegerField(default=0)),
                ("failure_count", models.IntegerField(default=0)),
            ],
            options={
                "ordering": ["name"],
                "indexes": [
                    models.Index(
                        fields=["service_type"], name="notificatio_service_862b35_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="notificatio_is_acti_9ea808_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="AlertRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "trigger_type",
                    models.CharField(
                        choices=[
                            ("opportunity_deadline", "Opportunity Deadline"),
                            ("task_overdue", "Task Overdue"),
                            ("milestone_missed", "Milestone Missed"),
                            ("budget_threshold", "Budget Threshold"),
                            ("time_threshold", "Time Threshold"),
                            ("inactivity", "Team Inactivity"),
                            ("custom", "Custom Rule"),
                        ],
                        max_length=30,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("conditions", models.JSONField(help_text="Rule conditions as JSON")),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("opportunity_new", "New Opportunity Available"),
                            (
                                "opportunity_deadline",
                                "Opportunity Deadline Approaching",
                            ),
                            ("decision_made", "Bid Decision Made"),
                            ("team_assignment", "Team Assignment"),
                            ("task_assigned", "Task Assigned"),
                            ("task_due", "Task Due Soon"),
                            ("task_overdue", "Task Overdue"),
                            ("milestone_approaching", "Milestone Approaching"),
                            ("milestone_overdue", "Milestone Overdue"),
                            ("comment_mention", "Mentioned in Comment"),
                            ("comment_reply", "Comment Reply"),
                            ("review_request", "Review Request"),
                            ("proposal_submitted", "Proposal Submitted"),
                            ("award_notification", "Award Notification"),
                            ("system_update", "System Update"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("message_template", models.TextField()),
                (
                    "target_roles",
                    models.JSONField(
                        blank=True, default=list, help_text="List of roles to target"
                    ),
                ),
                (
                    "max_frequency_hours",
                    models.IntegerField(
                        default=24, help_text="Minimum hours between alerts"
                    ),
                ),
                ("last_triggered", models.DateTimeField(blank=True, null=True)),
                ("trigger_count", models.IntegerField(default=0)),
                (
                    "target_users",
                    models.ManyToManyField(
                        blank=True,
                        related_name="alert_rules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "indexes": [
                    models.Index(
                        fields=["trigger_type"], name="notificatio_trigger_6fe5f1_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="notificatio_is_acti_888ed9_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["user", "-created_at"], name="notificatio_user_id_05b4bc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(fields=["status"], name="notificatio_status_d92267_idx"),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["notification_type"], name="notificatio_notific_f2898f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["priority"], name="notificatio_priorit_bf8ea0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["scheduled_for"], name="notificatio_schedul_cf7340_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["group_key"], name="notificatio_group_k_49f5bb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notificationdigest",
            index=models.Index(
                fields=["user", "digest_type"], name="notificatio_user_id_35f846_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notificationdigest",
            index=models.Index(
                fields=["period_start", "period_end"],
                name="notificatio_period__448714_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="notificationpreference",
            index=models.Index(
                fields=["user", "notification_type"],
                name="notificatio_user_id_1eba11_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="notificationpreference",
            index=models.Index(
                fields=["is_enabled"], name="notificatio_is_enab_cd097c_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="notificationpreference",
            unique_together={("user", "notification_type", "delivery_method")},
        ),
    ]
